#---------------------------------*- sh -*-------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright held by original author
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software; you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by the
#     Free Software Foundation; either version 2 of the License, or (at your
#     option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM; if not, write to the Free Software Foundation,
#     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Script
#     RunFunctions
#
# Description
#
#------------------------------------------------------------------------------

getApplication ()
{
    grep application system/controlDict | sed "s/application *\([a-zA-Z]*\);/\1/"
}

runApplication ()
{
    LOG_NAME=
    while getopts "l:" OPTFLAG ; do
        LOG_NAME=$OPTARG
        shift $((OPTIND-1)) ; OPTIND=1
    done
        
    APP_RUN=$1; shift
    APP_NAME=${APP_RUN##*/}

    if [ -z $LOG_NAME ] ; then
        LOG_NAME=log.$APP_NAME
    fi

    if [ -f $LOG_NAME ] ; then
        echo "$APP_NAME already run on $PWD: remove log file to run"
    else
        echo "Running $APP_NAME on $PWD"
        $APP_RUN $* > $LOG_NAME 2>&1
    fi
}

runParallel ()
{
    LOG_NAME=
    while getopts "l:" OPTFLAG ; do
        LOG_NAME=$OPTARG
        shift $((OPTIND-1)) ; OPTIND=1
    done
    
    APP_RUN=$1; shift
    APP_NAME=${APP_RUN##*/}

    if [ -z $LOG_NAME ] ; then
        LOG_NAME=log.$APP_NAME
    fi

    if [ -f $LOG_NAME ] ; then
        echo "$APP_NAME already run on $PWD: remove log file to run"
    else
        echo "Running $APP_NAME in parallel on $PWD using $1 processes"
        ( mpirun -np $1 $APP_RUN -parallel < /dev/null > $LOG_NAME 2>&1 )
    fi
}

compileApplication ()
{
    echo "Compiling $1 application"
    wmake $1
}

compileLibrary ()
{
    echo "Compiling $1 application"
    wmake libso $1
}

cloneCase ()
{
    if [ -d $2 ] ; then
        echo "Case already cloned: remove case directory $2 to clone"
    else
        echo "Cloning $2 case from $1"
        mkdir $2
        cpfiles="0 system constant"
        for f in $cpfiles
        do
            cp -r $1/$f $2
        done
    fi
}

makeFsiCaseLinks ()
{
    cd $1
    cd system
    ln -s ../../$2/system $2
    cd ../constant
    ln -s ../../$2/constant $2
    cd ../0
    ln -s ../../$2/0 $2
    cd ../..
}

makeFsiResultsLinks ()
{
    cd $1
    TIME_DIRS=`foamInfoExec -times | sed '1,/constant/d'`
    echo "makeFsiResultsLinks for" $TIME_DIRS
    cd ../$2
    for T in $TIME_DIRS
    do
        ln -s ../$1/${T}/solid ${T}
    done
    cd ..
}

#------------------------------------------------------------------------------
